{
  "Law38_1": {
    "Original expression": "Motor vehicle signal lights and non-motor vehicle signal lights indicate: When the green light is on, vehicles are allowed to pass, but turning vehicles shall not hinder the passing of straight vehicles and pedestrians that are being released. \n ",
    "Thought process": "The original text does not specify any requirement for the current road type where the ego vehicle is located, so we set the 'trigger' to 'always'. Then, this sentence indicates that the traffic light is controlling the vehicle's behavior. Therefore, we use find_traffic_light as a constraint. Specifically, the description refers to motor vehicle signal lights. Since it is a standard circular light without an arrow symbol, there is no need to set 'traffic_light_type'. The text specifies that the traffic light is green, so we set 'color' to 'green'. Additionally, the vehicle should respond before reaching the traffic light, but not from too far away. Hence, we set a condition to ensure the vehicle is within 20 meters of the traffic light: 'CompOp = <' and 'distance_num = 20'. As a result, we apply the constraint: 'find_traffic_light(color=green, CompOp=<, distance_num=20)'. Next, the sentence states that vehicles should not obstruct other vehicles or pedestrians. To reflect this, we specify that no vehicles or pedestrians are detected in the ego vehicle's immediate surroundings: 'find_obstacle(obstacle_type = pedestrian, position = left, distance = (CompOp = >, distance_num = 10))',  'find_obstacle(obstacle_type = pedestrian, position = right, distance = (CompOp = >, distance_num = 10))', 'find_obstacle(obstacle_type = pedestrian, position = front, distance = (CompOp = >, distance_num = 10))', 'find_obstacle(obstacle_type = vehicle, position = front, distance = (CompOp = >, distance_num = 20))'. It's also important to note that a green light does not require action if the ego vehicle is already moving. The ego vehicle should only react when stopped, Therefore, we use 'speed = (CompOp = <, speed_num = 1)' to determine whether the vehicle is stationary (i.e., if its speed is less than 1 km/h, we consider it to be stopped). Since the traffic light has no arrow symbol, vehicles do not need to consider their intended movement and must stop and wait. However, if the traffic light has an arrow symbol, only vehicles whose intended direction matches the arrow should respond to the light. Finally, we use 'vehicle_state(speed = (CompOp = <, speed_num = 1))' to perform this check. In this situation, the required action is to start moving, so we define: 'Mano_action = launch'.",
    "Function call": "Therefore, the complete UDrive function call instruction is: {'trigger': {'always': True}, 'condition': {'find_traffic_light': {'color': 'green', 'CompOp': '<', 'distance_num': 20}, 'find_obstacle': {'obstacle_type': 'pedestrian', 'position': 'left', 'distance': {'CompOp': '>', 'distance_num': 10}}, 'find_obstacle': {'obstacle_type': 'pedestrian', 'position': 'right', 'distance': {'CompOp': '>', 'distance_num': 10}}, 'find_obstacle': {'obstacle_type': 'pedestrian', 'position': 'front', 'distance': {'CompOp': '>', 'distance_num': 10}}, 'find_obstacle': {'obstacle_type': 'vehicle', 'position': 'front', 'distance': {'CompOp': '>', 'distance_num': 20}}, 'vehicle_state': {'driving_state': {'speed': {'CompOp': '<', 'speed_num': 1}}}}, 'action': {'Mano_action': 'launch'}} ",
    "Grammar": "UDrive ::= Rule+;\nRule ::= \"trigger\" Event (\"condition\" Condition)? \"then\" Action \"end\";\nEvent ::= \"always\";\nCondition ::= Condition Condition\n    | FindObstacleCondition\n    | \"find_traffic_light(\" (TrafficLightType \",\")? Color \",\" (Flash \",\")? CompOp \",\" Distance \")\"\n    | VehicleStateCondition;\nFindObstacleCondition ::= \"find_obstacle(\" ObstacleType \",\" Position (\",\" Direction)? \",\" \"(\" CompOp \",\" Distance \")\" (\",\" \"(\" CompOp \",\" Speed \")\")? \")\" ;\nVehicleStateCondition ::= \"vehicle_state(\" (DrivingState \",\")? (\"(\" CompOp \",\" Speed \")\")? (\",\" \"(\" CompOp \",\" Acceleration \")\")? (\",\" \"(\" Target+ \")\")?\")\" ;\nAction ::= ManoAction;\nManoAction ::= \"Mano(\" ManoType \")\" ;\nColor ::= \"green\";\nFlash ::= \"not_flash\";\nCompOp ::= \"<\" | \">\";\nDistance ::= \"20m\" | \"10m\";\nObstacleType ::= \"pedestrian\" | \"vehicle\";\nPosition ::= \"right\" | \"left\" | \"front\";\nSpeed ::= \"0.5km/h\";\nManoType ::= \"launch\";\n",
    "Result": "trigger \n    always \ncondition                                    \n    find_traffic_light(motor_vehicle_signal_light, green, not_flash, <, 20m)         \n    find_obstacle(pedestrian, right, (>, 10m))                                \n    find_obstacle(pedestrian, front, (>, 10m))\n    find_obstacle(pedestrian, left, (>, 10m))\n    find_obstacle(vehicle, right, (>, 10m))\n    vehicle_state((<, 1km/h))\nthen\n    Mano(launch)\nend\n"
  },
  "Law38_2": {
    "Original expression": "Motor vehicle signal lights and non-motor vehicle signal lights indicate: When the yellow light is on, vehicles that have crossed the stop line can continue to pass;",
    "Thought process": "The original text does not specify any requirement for the current road type where the ego vehicle is located, so we set the 'trigger' to 'always'. Subsequent text emphasizes that vehicles which have already crossed the stop line during a yellow light can continue to proceed. Since these vehicles have passed the control zone of the traffic light, no further traffic light regulation applies, and thus no UDrive function call needs to be generated in this case. However, we must also consider the scenario where the vehicle has not crossed the stop line. In such cases, the vehicle is required to stop. To capture this, we use the vehicle's distance from the traffic light to determine whether it should stop. Specifically, we define two conditions: 'find_traffic_light(color = yellow, CompOp = <, distance_num = 20)' and 'find_traffic_light(color = yellow, CompOp = >, distance_num = 5)'. These distance constraints ensure that vehicles which are either too far (and can ignore the signal for now) or too close (where passing during the yellow light is acceptable) are excluded. The parameter 'color = yellow' indicates that the traffic light is currently yellow. Since the traffic light has no arrow symbol, vehicles do not need to consider their intended movement and must stop and wait. However, if the traffic light has an arrow symbol, only vehicles whose intended direction matches the arrow should respond to the light. For ego vehicles within this defined distance range, we specify the action: 'Mano_action = stop'. It is important to note that we do not impose additional constraints on the current vehicle state in this case, because regardless of whether the vehicle is moving or stopped, it should stop and wait if it falls within the specified range during a yellow light.",
    "Function call": "Therefore, the complete UDrive function call instruction is: {'trigger': {'always': True}, 'condition': {'find_traffic_light': {'color': 'yellow', 'CompOp': '<', 'distance_num': 20}, 'find_traffic_light': {'color': 'yellow', 'CompOp': '>', 'distance_num': 5}}, 'action': {'Mano_action': 'stop'}}",
    "Grammar": "UDrive ::= Rule+;\nRule ::= \"trigger\" Event (\"condition\" Condition)? \"then\" Action \"end\";\nEvent ::= \"always\";\nCondition ::= Condition Condition\n    | \"find_traffic_light(\" (TrafficLightType \",\")? Color \",\" (Flash \",\")? CompOp \",\" Distance \")\";\nAction ::= ManoAction;\nManoAction ::= \"Mano(\" ManoType \")\" ;\nColor ::= \"yellow\";\nFlash ::= \"not_flash\";\nCompOp ::= \"<\" | \">\";\nDistance ::= \"20m\" | \"5m\";\nManoType ::= \"stop\";\n",
    "Result": "trigger \n    always \ncondition\n    find_traffic_light(motor_vehicle_signal_light, yellow, not_flash, <, 20m)\n    find_traffic_light(motor_vehicle_signal_light, yellow, not_flash, >, 5m)\nthen\n    Mano(stop)\nend\n"
  },
  "Law38_3": {
    "Original expression": "Motor vehicle signal lights and non-motor vehicle signal lights indicate: When the red light is on, vehicles are prohibited from passing. When the red light is on, vehicles turning right can pass without hindering the passage of vehicles or pedestrians.",
    "Thought process": "The original text does not specify any requirement for the current road type where the ego vehicle is located, so we set the 'trigger' to 'always'. The first sentence specifies that when the red light is on, the vehicle should stop and wait. Therefore, we define the controlled range by the distance between the vehicle and the traffic light. We set the condition 'find_traffic_light(color = red, CompOp = <, distance_num = 20)' to indicate the ego vehicle is approaching the traffic light. Since the ego vehicle is within the controlled area and the red light is on, it is required to stop. Hence, we define the action as 'Mano_action = stop'. The second sentence adds an exception to the red light stop rule: if the ego vehicle is turning right and does not hinder other vehicles or pedestrians, it may continue to proceed. Therefore, we differentiate based on the ego vehicle's intended direction. If the vehicle is turning left or going straight ('vehicle_state(driving_state = turn_left_or_go_straight)'), it must stop. However, if the vehicle is turning right ('vehicle_state(driving_state = turn_right)'), even when the red light is on, it can continue moving. Therefore, we set the behavior 'Whether_red_light_turn_right' to 'True'. Considering that surrounding vehicles and pedestrians may also cause the ego vehicle to stop and start, but since these are due to obstacles, we do not set explicit stop/launch requirements and rely on the system's obstacle handling mode. Nevertheless, we still add the behavior 'Expected_speed = 30' to ensure cautious driving when making a right turn. In addition, if the vehicle is already in a stopped state('vehicle_state(driving_state = turn_right, speed = (CompOp = <, speed_num = 1))'), we need to initiate a launch action ('Mano_action = lanuch').",
    "Grammar": "UDrive ::= Rule+;\nRule ::= \"trigger\" Event (\"condition\" Condition)? \"then\" Action \"end\";\nEvent ::= \"always\";\nCondition ::= Condition Condition\n    | \"find_traffic_light(\" (TrafficLightType \",\")? Color \",\" (Flash \",\")? CompOp \",\" Distance \")\"\n    | VehicleStateCondition;\nVehicleStateCondition ::= \"vehicle_state(\" (DrivingState \",\")? (\"(\" CompOp \",\" Speed \")\")? (\",\" \"(\" CompOp \",\" Acceleration \")\")? (\",\" \"(\" Target+ \")\")?\")\" ;\nAction ::= ManoAction;\nManoAction ::= \"Mano(\" ManoType \")\" ;\nColor ::= \"red\";\nFlash ::= \"not_flash\";\nCompOp ::= \"<\";\nDistance ::= \"20m\";\nDrivingState ::= \"turn_left_or_go_straight\";\nManoType ::= \"stop\";\nUDrive ::= Rule+;\nRule ::= \"trigger\" Event (\"condition\" Condition)? \"then\" Action \"end\";\nEvent ::= \"always\";\nCondition ::= Condition Condition\n    | \"find_traffic_light(\" (TrafficLightType \",\")? Color \",\" (Flash \",\")? CompOp \",\" Distance \")\"\n    | VehicleStateCondition;\nVehicleStateCondition ::= \"vehicle_state(\" (DrivingState \",\")? (\"(\" CompOp \",\" Speed \")\")? (\",\" \"(\" CompOp \",\" Acceleration \")\")? (\",\" \"(\" Target+ \")\")?\")\" ;\nAction ::= Action Action\n    | ManoAction\n    | SetBooleanAction\n    | SetNumberAction;\nManoAction ::= \"Mano(\" ManoType \")\" ;\nSetBooleanAction  ::= \"Set(\" Parameters_Boolean \",\" Boolean \")\" ;\nSetNumberAction   ::= \"Set(\" Parameters_Number \",\" Value \")\" ;\nColor ::= \"red\";\nFlash ::= \"not_flash\";\nCompOp ::= \"<\";\nDistance ::= \"20m\";\nDrivingState ::= \"turn_right\";\nSpeed ::= \"1km/h\";\nManoType ::= \"launch\";\nParameters_Boolean ::= \"Whether_red_light_turn_right\";\nBoolean ::= True;\nParameters_Number ::= \"Expected_speed\";\nValue ::= \"30km/h\";\nUDrive ::= Rule+;\nRule ::= \"trigger\" Event (\"condition\" Condition)? \"then\" Action \"end\";\nEvent ::= \"always\";\nCondition ::= Condition Condition\n    | \"find_traffic_light(\" (TrafficLightType \",\")? Color \",\" (Flash \",\")? CompOp \",\" Distance \")\"\n    | VehicleStateCondition;\nVehicleStateCondition ::= \"vehicle_state(\" (DrivingState \",\")? (\"(\" CompOp \",\" Speed \")\")? (\",\" \"(\" CompOp \",\" Acceleration \")\")? (\",\" \"(\" Target+ \")\")?\")\" ;\nAction ::= Action Action\n    | SetBooleanAction\n    | SetNumberAction;\nSetBooleanAction  ::= \"Set(\" Parameters_Boolean \",\" Boolean \")\" ;\nSetNumberAction   ::= \"Set(\" Parameters_Number \",\" Value \")\" ;\nColor ::= \"red\";\nFlash ::= \"not_flash\";\nCompOp ::= \"<\";\nDistance ::= \"20m\";\nDrivingState ::= \"turn_right\";\nParameters_Boolean ::= \"Whether_red_light_turn_right\";\nBoolean ::= True;\nParameters_Number ::= \"Expected_speed\";\nValue ::= \"30km/h\";\n",
    "Function call": "Therefore, the complete UDrive function call instruction is: [{'trigger': {'always': True}, 'condition': {'find_traffic_light': {'color': 'red', 'CompOp': '<', 'distance_num': 20}, 'vehicle_state': {'driving_state': 'turn_left_or_go_straight'}}, 'action': {'Mano_action': 'stop'}}, {'trigger': {'always': True}, 'condition': {'find_traffic_light': {'color': 'red', 'CompOp': '<', 'distance_num': 20}, 'vehicle_state': {'driving_state': 'turn_right', 'speed': {'CompOp': '<', 'speed_num': 1}}}, 'action': {'Mano_action': 'launch', 'Whether_red_light_turn_right': True, 'Expected_speed': 30}}, {'trigger': {'always': True}, 'condition': {'find_traffic_light': {'color': 'red', 'CompOp': '<', 'distance_num': 20}, 'vehicle_state': {'driving_state': 'turn_right'}}, 'action': {'Whether_red_light_turn_right': True, 'Expected_speed': 30}}]",
    "Result": "trigger \n    always \ncondition\n    find_traffic_light(motor_vehicle_signal_light, red, not_flash, <, 20m)\n    vehicle_state(turn_left_or_go_straight)\nthen\n    Mano(stop)\nend\ntrigger \n    always \ncondition\n    find_traffic_light_state(motor_vehicle_signal_light, red, not_flash, <, 20m)\n    vehicle_state(turn_right, (<, 1km/h))\nthen\n    Mano(launch)\n    set(Whether_red_light_turn_right, True)\n    Set(Expected_speed, 30km/h)\nend\ntrigger \n    always \ncondition\n    find_traffic_light_state(motor_vehicle_signal_light, red, not_flash, <, 20m)\n    vehicle_state(turn_right)\nthen\n    set(Whether_red_light_turn_right, True)\n    Set(Expected_speed, 30km/h)\nend\n"
  },
  "Law62_1": {
    "Original expression": "Driving a motor vehicle shall not have the following behaviours: Turn off the engine or slide in neutral when descending a steep slope;",
    "Thought process": "According to the original description requirements, when the vehicle is descending a slope, the engine must not be turned off, nor should the vehicle be shifted into neutral gear. However, for the constraint 'descending a slope' and the actions 'must not turn off the engine' and 'must not shift into neutral gear', UDrive's current triggers, conditions, and actions cannot accurately or appropriately describe them, so no UDrive rules will be generated.",
    "Function call": "Therefore, no UDrive rules will be generated here.",
    "Grammar": "",
    "Result": ""
  }
}