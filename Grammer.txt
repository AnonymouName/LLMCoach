UDrive ::= Rule+;
Rule ::= "trigger" Event ("condition" Condition)? "then" Action "end";
Event ::= "always" | "in(" RoadType ")" | "not_in(" RoadType ")";
Condition ::= Condition Condition
    | "!" Condition
    | "time_is(" Time ")"
    | "weather_is(" Weather ")"
    | "is_special_lane(" SpecialLane ")"
    | "distance_to(" RoadType "," CompOp "," Distance ")"
    | FindObstacleCondition
    | "is_jam"
    | "find_signal(" SignalType ", " CompOp "," Distance ")"
    | "find_traffic_light(" (TrafficLightType ",")? Color "," (Flash ",")? CompOp "," Distance ")"
    | VehicleStateCondition;
FindObstacleCondition ::= "find_obstacle(" ObstacleType "," Position ("," Direction)? "," "(" CompOp "," Distance ")" ("," "(" CompOp "," Speed ")")? ")" ;
VehicleStateCondition ::= "vehicle_state(" (DrivingState ",")? ("(" CompOp "," Speed ")")? ("," "(" CompOp "," Acceleration ")")? ("," "(" Target+ ")")? ")" ;
Action ::= Action Action 
    | SetBooleanAction 
    | SetNumberAction 
    | SetCheckAction 
    | SetDistanceAction 
    | SetWaitAction 
    | ChangeLaneAction 
    | ManoAction 
    | StateAction ;
SetBooleanAction  ::= "Set(" Parameters_Boolean "," Boolean ")" ;
SetNumberAction   ::= "Set(" Parameters_Number "," Value ")" ;
SetCheckAction    ::= "Set(" "Whether_check" "," CheckType "," Boolean ")" ;
SetDistanceAction ::= "Set(" ("Preparation_distance" | "Stopping_distance") "," CheckType "," Distance ")" ;
SetWaitAction     ::= "Set(" ("Wait_time" | "Creep_time") "," CheckType "," Integer ")" ;
ChangeLaneAction  ::= "Change_lane(" TurnDirection "," Times ")" ;
ManoAction        ::= "Mano(" ManoType ")" ;
StateAction       ::= "State(" Target "," Boolean ")";

RoadType ::= "urban_lane" | "intersection" | "bridge" | "ferry_crossing" | "mountain_road" | "icy_road" | "flooded_road" | "flooded_bridge" | "motorway" | "railway_crossing" | "sharp_curve" | "narrow_road" | "narrow_bridge" | "muddy_road" | "non-motorized" | "steep_slope" | "sharp_bend" | "roundabout" | "crosswalk" | "no_parking_zone" | "tunnel" | "highway" | "highway_exit_ramp";
Time ::= "daytime" | "night";
Weather ::= "raining" | "foggy" | "snowing" | "sandstorm" | "hail";
SpecialLane ::= "fast_lane" | "bus_lane" | "emergency_lane" | "without_centerline" | "one_lane_same_direction" | "non_motorized";
CompOp ::= ">" | "<" | "==" | "<=" | ">=";
ObstacleType ::= "all" | "vehicle" | "pedestrian" | "bicycle" | "motorcycle" | "non-motorized" | "others";
Position ::= "left" | "right" | "front" | "back";
Direction ::= "same" | "opposite";
SignalType ::= "yield_signal" | "stop_signal" | "speed_limit_signal" | "no_parking_signal" | "school_signal" | "crosswalk_signal" | "no_u-turn_signal" | "no_honking_signal" | "no_left_turn_signal";
TrafficLightType ::= "left-turn_signal_light" | "right-turn_signal_light" | "straight-through_signal_light";
Color ::= "green" | "red" | "yellow" | "black";
Flash ::= "flash" | "not_flash";
DrivingState ::= "go_straight" | "turn_left" | "turn_right" | "reverse" | "change_lane_to_left" | "change_lane_to_right" | "turn_left_or_go_straight" | "turn_right_or_go_straight" | "u_turn" | "towing" | "turn_left_or_turn_right" | "pull_over";
Parameters_Boolean ::= "Whether_priority_change_lane" | "Whether_allow_borrow_lane(" TurnDirection ")" | "Whether_allow_u_turn" | "Whether_allow_reverse" | "Whether_declearation" | "Whether_red_light_turn_right" | "Whether_allow_left_lane_change" | "Whether_allow_right_lane_change" | "Whether_stop_before_entering_uncontrolled_intersection";
Parameters_Number ::= "Forward_buffer_distance" | "Backward_buffer_distance" | "Lateral_buffer_distance" | "Dynamic_Obstacle_Follow_distance" | "Dynamic_Obstacle_Overtake_distance" | "Dynamic_Obstacle_Overtake_distance" | "Min_stop_distance" | "Static_Obstacle_Deceleration_ratio" | "Dynamic_Obstacle_Deceleration_ratio" | "Min_speed_for_keep_clear" | "Time_interval_for_lane_change" | "Check_distance" | "Expected_speed";
CheckType ::= RoadType | SignalType;
TurnDirection ::= "left" | "right";
ManoType ::= "borrow_lane" | "pull_over" | "stop" | "wait" | "launch";
Target ::= "left_turn_light" | "right_turn_light" | "fog_light" | "low_beam" | "high_beam" | "hazard_warning_light" | "position_light" | "horn" | "alternated_between_high_and_low_beams";

Times ::= Integer;
Value = Integer | Float | Speed | Acceleration | Distance;
Distance ::= Integer “m”;
Speed ::= Integer “km/h” | "posted_limit_speed";
Acceleration ::= Integer “m/s^2”;

Integer ::= Digit+;
Float ::= Digit+ "." Digit+;
Digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
Boolean ::= "True" | "False";
