Law40_1: Lane signal lights indicate: When the green arrow light is on, allow vehicles in the lane to pass in the direction indicated;
```
trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)                                        
    traffic_light_state(lane_signal_light, green, not_flash)         
    vehicle_state(stop)
then
    Mano(launch)
end
```

Law40_2: Lane signal lights indicate: When the red cross-shaped light or arrow light is on, vehicles in the lane are prohibited from passing.
Here's the UDrive program for the given expression:

```
trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)                                        
    traffic_light_state(lane_signal_light, red, not_flash)
then
    Mano(stop)
end
```

For the arrow light variant:

```
trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)                                        
    traffic_light_state(lane_signal_light, red, not_flash)
    vehicle_state(go_straight)
then
    Mano(stop)
end
```

Law41: The arrow directions of the directional signal light indicate the intended movement: a left-pointing arrow signifies a left turn, an upward-pointing arrow signifies going straight, and a right-pointing arrow signifies a right turn.
Here are the UDrive programs for the given natural language queries:

1. Red light behavior:
```udrive
trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)
    traffic_light_state(motor_vehicle_signal_light, red, not_flash)
    vehicle_state(turn_left_or_go_straight)
then
    Mano(stop)
end

trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)
    traffic_light_state(motor_vehicle_signal_light, red, not_flash)
    vehicle_state(turn_right)
then
    Set(Whether_red_light_turn_right, True)
    Set(Expected_speed, 30km/h)
end
```

2. Yellow light behavior:
```udrive
trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)
    find_signal(traffic_light, >, 5m)
    traffic_light_state(motor_vehicle_signal_light, yellow, not_flash)
then
    Mano(stop)
end
```

3. Green light behavior:
```udrive
trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)
    traffic_light_state(motor_vehicle_signal_light, green, not_flash)
    find_obstacle(pedestrian, right, (>, 10m))
    find_obstacle(pedestrian, front, (>, 10m))
    find_obstacle(pedestrian, left, (>, 10m))
    find_obstacle(vehicle, right, (>, 10m))
    vehicle_state(stop)
then
    Mano(launch)
end
```

4. No program is generated for the steep slope scenario as it cannot be accurately represented with the current UDrive syntax.

Law42: The flashing warning signal light is a yellow light that continues to flash, reminding vehicles and pedestrians to pay attention when passing through, and pass after confirming safety.
Here's the program for the given natural language query about flashing warning signal lights:

```
trigger
    always
condition
    find_signal(traffic_light, <, 20m)
    traffic_light_state(warning_signal_light, yellow, flash)
    find_obstacle(pedestrian, front, (>, 5m))
    find_obstacle(vehicle, front, (>, 10m))
then
    Set(Expected_speed, 20km/h)
end

trigger
    always
condition
    find_signal(traffic_light, <, 20m)
    traffic_light_state(warning_signal_light, yellow, flash)
    find_obstacle(pedestrian, front, (<=, 5m))
then
    Mano(stop)
end
```

Law43: At a railway crossing where the road intersects with a railway, two red lights flashing alternately or a single red light illuminated indicates that vehicles and pedestrians are prohibited from passing; when the red lights are off, it indicates that vehicles and pedestrians are permitted to proceed.
```
trigger 
    always 
condition 
    in(railway_crossing)
    traffic_light_state(warning_signal_light, red, flash)
then
    Mano(stop)
end

trigger 
    always 
condition 
    in(railway_crossing)
    !traffic_light_state(warning_signal_light, red, flash)
then
    Mano(launch)
end
```

Law44_1: Where there are two or more motorized lanes in the same direction on the road, the left side is the fast lane and the right side is the slow lane. Motor vehicles traveling in a fast lane shall drive at the speed specified in the fast lane, and those that have not reached the speed specified in the fast lane shall drive in a slow lane.
Here's the UDrive program for the given traffic rules:

```
trigger
    in(motorway)
condition
    is_special_lane(fast_lane)
    vehicle_state((<, 100km/h))
then
    Change_lane(right, 1)
end

trigger
    in(motorway)
condition
    is_special_lane(fast_lane)
    vehicle_state((>=, 100km/h))
then
    Set(Expected_speed, 100km/h)
end
```

Law44_2: Motorcycles should drive in the rightmost lane.
```
trigger
    in(motorway)
condition
    is_special_lane(fast_lane)
then
    Change_lane(right, 1)
end
```

Law44_3: If there are traffic signs indicating the driving speed, drive at the indicated driving speed.
```ebnf
trigger 
    always 
condition 
    find_signal(speed_limit_signal, ==, 0m)
then
    Set(Expected_speed, posted_limit_speed)
end
```

Law44_4: When a motor vehicle in a slow lane overtakes the preceding vehicle, it can borrow the fast lane to drive.
```ebnf
trigger 
    always 
condition 
    in(motorway)
    distance_to(fast_lane, <, 50m)
    find_obstacle(vehicle, front, same, (>, 20m))
    vehicle_state(go_straight, (>, 60km/h))
then
    Change_lane(left, 1)
    Set(Whether_allow_borrow_lane(left), True)
end
```

Law44_5: Where there are two or more lanes for motor vehicles traveling in the same direction, a motor vehicle changing lanes shall not impede the normal driving of vehicles in the target lane.
```
trigger 
    always 
condition 
    in(motorway) 
    find_obstacle(vehicle, left, (<=, 20m)) 
    vehicle_state(change_lane_to_left)
then
    Set(Whether_allow_left_lane_change, False)
end

trigger 
    always 
condition 
    in(motorway) 
    find_obstacle(vehicle, right, (<=, 20m)) 
    vehicle_state(change_lane_to_right)
then
    Set(Whether_allow_right_lane_change, False)
end
```

Law45_1: Motor vehicles must not exceed the speed indicated by the speed limit signs and markings on the road.
```
trigger 
    always 
condition 
    find_signal(speed_limit_signal, <, 100m) 
    vehicle_state((>, current_speed))
then
    Set(Expected_speed, posted_limit_speed)
end
```

Law45_2: On roads without speed limit signs and markings, motor vehicles shall not exceed the following maximum speeds. For roads without a road centerline, urban roads are 30 kilometers per hour, and highways are 40 kilometers per hour;
Here's the UDrive program for the given natural language query:

```
trigger
    in(without_centerline)
condition
    time_is(daytime)
then
    Set(Expected_speed, 30km/h)
end

trigger
    in(without_centerline)
condition
    time_is(night)
then
    Set(Expected_speed, 40km/h)
end
```

Law45_3: On roads without speed limit signs and markings, motor vehicles shall not exceed the following maximum speeds. For roads with only one motor vehicle lane in the same direction, 50 kilometers per hour for urban roads and 70 kilometers per hour for highways.
```
trigger
    in(urban_lane)
condition
    is_special_lane(one_lane_same_direction)
then
    Set(Expected_speed, 50km/h)
end

trigger
    in(motorway)
condition
    is_special_lane(one_lane_same_direction)
then
    Set(Expected_speed, 70km/h)
end
```

Law46_1: When a motor vehicle encounters one of the following conditions, the maximum speed shall not exceed 30 kilometers per hour, and the maximum speed of tractors, battery vehicles, and wheeled special machinery vehicles shall not exceed 15 kilometers per hour: When entering or leaving a non-motorized vehicle lane, passing through a railway crossing, a sharp curve, a narrow road, or a narrow bridge;
Here's the UDrive program for the given traffic rule:

```
trigger 
    in(railway_crossing) or in(sharp_curve) or in(narrow_road) or in(narrow_bridge) or in(non-motorized)
condition
    vehicle_state((>, 30km/h))
then
    Set(Expected_speed, 30km/h)
end

trigger 
    in(railway_crossing) or in(sharp_curve) or in(narrow_road) or in(narrow_bridge) or in(non-motorized)
condition
    vehicle_state((>, 15km/h), (towing))
then
    Set(Expected_speed, 15km/h)
end
```

Law46_2: When a motor vehicle encounters one of the following conditions, the maximum speed shall not exceed 30 kilometers per hour, and the maximum speed of tractors, battery vehicles, and wheeled special machinery vehicles shall not exceed 15 kilometers per hour: When making a U-turn, turning, or going downhill;
Here's the UDrive program for the given expression:

```
trigger
    in(steep_slope)
condition
    vehicle_state((<, 30km/h))
then
    Set(Expected_speed, 30km/h)
end

trigger
    in(steep_slope)
condition
    vehicle_state(towing, (<, 15km/h))
then
    Set(Expected_speed, 15km/h)
end

trigger
    in(sharp_bend)
condition
    vehicle_state((<, 30km/h))
then
    Set(Expected_speed, 30km/h)
end

trigger
    in(sharp_bend)
condition
    vehicle_state(towing, (<, 15km/h))
then
    Set(Expected_speed, 15km/h)
end

trigger
    always
condition
    vehicle_state(u_turn, (<, 30km/h))
then
    Set(Expected_speed, 30km/h)
end

trigger
    always
condition
    vehicle_state(u_turn, towing, (<, 15km/h))
then
    Set(Expected_speed, 15km/h)
end
```

Law46_3: When a motor vehicle encounters one of the following conditions, the maximum speed shall not exceed 30 kilometers per hour, and the maximum speed of tractors, battery vehicles, and wheeled special machinery vehicles shall not exceed 15 kilometers per hour: In case of fog, rain, snow, sand dust, hail, the visibility is within 50 meters;
Here's the UDrive program for the given natural language query:

```
trigger
    always
condition
    weather_is(foggy) or weather_is(raining) or weather_is(snowing) or weather_is(sandstorm) or weather_is(hail)
    distance_to(any, <=, 50m)
then
    Set(Expected_speed, 30km/h)
end

trigger
    always
condition
    weather_is(foggy) or weather_is(raining) or weather_is(snowing) or weather_is(sandstorm) or weather_is(hail)
    distance_to(any, <=, 50m)
    vehicle_state(towing)
then
    Set(Expected_speed, 15km/h)
end
```

Law46_4: When a motor vehicle encounters one of the following conditions, the maximum speed shall not exceed 30 kilometers per hour, and the maximum speed of tractors, battery vehicles, and wheeled special machinery vehicles shall not exceed 15 kilometers per hour: When driving on icy and muddy roads;
Here's the UDrive program for the given natural language query:

```
trigger 
    in(icy_road) 
then
    Set(Expected_speed, 30km/h)
end

trigger 
    in(muddy_road) 
then
    Set(Expected_speed, 30km/h)
end
```

Law46_5: When a motor vehicle encounters one of the following conditions, the maximum speed shall not exceed 30 kilometers per hour, and the maximum speed of tractors, battery vehicles, and wheeled special machinery vehicles shall not exceed 15 kilometers per hour: When towing a malfunctioning motor vehicle.
Here's the UDrive program for the given expression:

```
trigger
    always
condition
    vehicle_state(towing)
then
    Set(Expected_speed, 30km/h)
end
```

For tractors, battery vehicles, and wheeled special machinery vehicles, a separate rule would be needed with their specific speed limit, but those vehicle types aren't currently defined in the RoadType or other type definitions in the provided grammar.

Law47_1: When a motor vehicle is overtaking, it shall turn on the left turn signal in advance, change the use of far and low beam lights, or honk the horn.
```
trigger
    always
condition
    vehicle_state(change_lane_to_left)
    find_obstacle(vehicle, front, (<, 50m))
then
    State(left_turn_light, True)
    State(alternated_between_high_and_low_beams, True)
    State(horn, True)
end
```

Law47_2: On a road with no center line of the road or with only one motor vehicle lane in the same direction, when the vehicle in front meets the vehicle behind and sends an overtaking signal, if conditions permit, the speed should be reduced and the road should be made to the right. After confirming that there is a sufficient safety distance, the following vehicle should pass from the left side of the vehicle in front, and after pulling the necessary safety distance from the overtaken vehicle, turn on the right turn signal and drive back to the original lane.
```
trigger
    in(without_centerline) or in(one_lane_same_direction)
condition
    find_obstacle(vehicle, front, same, (<=, 50m))
    vehicle_state(go_straight, (>=, 30km/h))
    find_signal(overtaking_signal, ==, 0m)
then
    Set(Expected_speed, 20km/h)
    Change_lane(right, 1)
    State(right_turn_light, True)
end

trigger
    in(without_centerline) or in(one_lane_same_direction)
condition
    find_obstacle(vehicle, front, same, (>, 100m))
    vehicle_state(go_straight, (>=, 20km/h))
then
    Change_lane(left, 1)
    State(left_turn_light, True)
end

trigger
    in(without_centerline) or in(one_lane_same_direction)
condition
    find_obstacle(vehicle, back, same, (<=, 100m))
    vehicle_state(go_straight, (>=, 20km/h))
then
    State(left_turn_light, False)
    State(right_turn_light, True)
    Change_lane(right, 1)
end
```

Law48_1: On roads without central isolation facilities or without a central line, motor vehicles come in opposite directions. The following regulations should be observed when driving: Slow down and keep to the right, and keep a necessary safe distance from other vehicles and pedestrians;
```
trigger
    in(narrow_road) or in(without_centerline)
condition
    find_obstacle(vehicle, front, opposite, (>, 50m))
then
    Set(Expected_speed, 30km/h)
    State(left_turn_light, False)
    State(right_turn_light, False)
end

trigger
    in(narrow_road) or in(without_centerline)
condition
    find_obstacle(vehicle, front, opposite, (<=, 50m))
then
    Set(Expected_speed, 20km/h)
    State(left_turn_light, False)
    State(right_turn_light, False)
end
```

Law48_2: On roads without central isolation facilities or without a central line, motor vehicles come in opposite directions. The following regulations should be observed when driving: On a road with obstacles, the side with obstacles shall go first; but when the side with obstacles has entered the road with obstacles and the side with obstacles has not, the side with obstacles shall go first;
Here are the UDrive rules for the given scenario:

```
trigger
    in(narrow_road)
condition
    find_obstacle(all, front, same, (>, 50m), (>, 20km/h))
    !find_obstacle(all, front, opposite, (>, 50m), (>, 20km/h))
then
    Set(Expected_speed, 30km/h)
end

trigger
    in(narrow_road)
condition
    find_obstacle(all, front, opposite, (>, 50m), (>, 20km/h))
    !find_obstacle(all, front, same, (>, 50m), (>, 20km/h))
then
    Set(Expected_speed, 30km/h)
end

trigger
    in(narrow_road)
condition
    find_obstacle(all, front, same, (<=, 50m))
    find_obstacle(all, front, opposite, (<=, 50m))
then
    Mano(stop)
end
```

Law48_3: On roads without central isolation facilities or without a central line, motor vehicles come in opposite directions. The following regulations should be observed when driving: On a narrow slope, the uphill side goes first; but when the downhill side has reached halfway and the uphill side is not uphill, the downhill side goes first;
```ebnf
trigger 
    always 
condition 
    in(steep_slope)
    vehicle_state(go_straight, (>, 0km/h))
then
    Set(Whether_allow_reverse, False)
    Set(Whether_declearation, False)
end
```

Law48_4: On roads without central isolation facilities or without a central line, motor vehicles come in opposite directions. The following regulations should be observed when driving: On the narrow mountain road, the side that does not rely on the mountain shall go first;
```
trigger
    in(narrow_road)
condition
    is_special_lane(without_centerline)
    find_obstacle(vehicle, front, opposite, (>, 50m))
then
    Set(Whether_priority_change_lane, False)
    Set(Expected_speed, 20km/h)
end

trigger
    in(narrow_road)
condition
    is_special_lane(without_centerline)
    find_obstacle(vehicle, front, opposite, (<=, 50m))
    find_obstacle(vehicle, front, opposite, (>, 10m))
then
    Mano(stop)
end

trigger
    in(narrow_road)
condition
    is_special_lane(without_centerline)
    find_obstacle(vehicle, front, opposite, (<=, 10m))
then
    Set(Whether_allow_borrow_lane(left), True)
    Change_lane(left, 1)
end
```

Law48_5: On roads without central isolation facilities or without a central line, motor vehicles come in opposite directions. The following regulations should be observed when driving: During nighttime driving, low beam headlights shall be used when approaching an oncoming vehicle from a distance greater than 150 meters. Low beams shall also be used when encountering non-motorized vehicles on narrow roads or narrow bridges at night.
Here's the UDrive program for the given natural language query:

```
trigger 
    always 
condition 
    not_in(motorway)
    time_is(night)
    distance_to(vehicle, opposite, >, 150m)
then
    State(low_beam, True)
end

trigger 
    always 
condition 
    in(narrow_road) or in(narrow_bridge)
    time_is(night)
    find_obstacle(non-motorized, front, same, (>, 0m))
then
    State(low_beam, True)
end
```

Law49_1: Motor vehicles shall not make a U-turn at locations where U-turns or left turns are prohibited by signs or markings, or at railway crossings, pedestrian crossings, bridges, sharp curves, steep slopes, tunnels, or other road sections where danger is likely to occur.
```
trigger
    always
condition
    in(railway_crossing) or in(crosswalk) or in(bridge) or in(sharp_curve) or in(steep_slope) or in(tunnel)
then
    Set(Whether_allow_u_turn, False)
end

trigger
    always
condition
    find_signal(no_u-turn_signal, ==, 0m) or find_signal(no_left_turn_signal, ==, 0m)
then
    Set(Whether_allow_u_turn, False)
end
```

Law49_2: Motor vehicles can make U-turns where there is no prohibition of turning or left-turning signs or markings, but it shall not hinder the passage of other vehicles and pedestrians in normal driving.
Here are the UDrive programs for the given natural language query:

```
trigger 
    always 
condition 
    in(steep_slope)
    vehicle_state((<, 0km/h))
then
    Set(Whether_allow_reverse, False)
end

trigger 
    always 
condition 
    not_in(steep_slope)
    find_obstacle(all, front, (>, 20m))
    is_special_lane(without_centerline)
    !is_jam
then
    Set(Whether_allow_u_turn, True)
    Set(Expected_speed, 20km/h)
end
```

Law50: When a motor vehicleis reversing, the situation behind the vehicle shall be ascertained and the vehicle shall be reversed after confirming that it is safe. Do not reverse in railway crossings, intersections, one-way roads, bridges, sharp bends, steep slopes, or tunnels.
Here's the UDrive program for the given natural language query:

```
trigger 
    in(railway_crossing, intersection, one_lane_same_direction, bridge, sharp_bend, steep_slope)
condition 
    vehicle_state(reverse)
then
    Mano(stop)
end

trigger 
    always
condition 
    vehicle_state(reverse)
    find_obstacle(all, back, (<=, 5m))
then
    Mano(stop)
end

trigger 
    always
condition 
    vehicle_state(reverse)
    !find_obstacle(all, back, (<=, 5m))
then
    Mano(launch)
end
```

Law51_1: Motor vehicles passing through intersections controlled by traffic lights shall pass in accordance with the following regulations: At an intersection with a guide lane, drive into the guide lane according to the required direction of travel;
```ebnf
trigger 
    always 
condition 
    in(intersection)
    is_special_lane(guide_lane)
    vehicle_state(go_straight)
then
    State(left_turn_light, False)
    State(right_turn_light, False)
end

trigger 
    always 
condition 
    in(intersection)
    is_special_lane(guide_lane)
    vehicle_state(turn_left)
then
    State(left_turn_light, True)
    State(right_turn_light, False)
end

trigger 
    always 
condition 
    in(intersection)
    is_special_lane(guide_lane)
    vehicle_state(turn_right)
then
    State(left_turn_light, False)
    State(right_turn_light, True)
end
```

Law51_2: Motor vehicles passing through intersections controlled by traffic lights shall pass in accordance with the following regulations: Those who are preparing to enter the roundabout let motor vehicles already in the intersection go ahead;
Here's the UDrive program for the given traffic regulation:

```
trigger 
    in(roundabout)
condition 
    find_obstacle(vehicle, front, same, (<=, 20m))
    vehicle_state(go_straight)
then
    Mano(stop)
end

trigger 
    not_in(roundabout)
condition 
    find_signal(traffic_light, <, 10m)
    is_special_lane(roundabout)
    find_obstacle(vehicle, front, same, (<=, 20m))
then
    Mano(wait)
end
```

This program implements two rules:
1. When already in a roundabout, if there's a vehicle within 20m ahead going straight, stop to let it pass
2. When approaching a roundabout (within 10m of the traffic light), if there's a vehicle within 20m ahead, wait to let it pass first

Law51_3: Motor vehicles passing through intersections controlled by traffic lights shall pass in accordance with the following regulations: When turning to the left, turn to the left of the center of the intersection. Turn on the turn signal when turning, and turn on the low beam when driving at night;
Here's the UDrive program for the given traffic regulation:

```
trigger 
    in(intersection)
condition 
    vehicle_state(turn_left)
then
    State(1, True)
end

trigger 
    in(intersection)
condition 
    time_is(night)
    vehicle_state(go_straight, turn_left, turn_right, turn_left_or_go_straight, turn_right_or_go_straight)
then
    State(low_beam, True)
end
```

And here's the grammar in EBNF that covers these rules:

```
UDrive ::= Rule+;
Rule ::= "trigger" Event ("condition" Condition)? "then" Action "end";
Event ::= "always" | "in(" RoadType ")" | "not_in(" RoadType ")";
Condition ::= Condition Condition
    | "!" Condition
    | "time_is(" Time ")"
    | "vehicle_state(" DrivingState ("," DrivingState)* ")"
    ;
Action ::= "State(" Target "," Boolean ")";
RoadType ::= "intersection";
Time ::= "night";
DrivingState ::= "turn_left" | "go_straight" | "turn_right" | "turn_left_or_go_straight" | "turn_right_or_go_straight";
Target ::= "left_turn_light" | "low_beam";
Boolean ::= "True" | "False";
```

Law51_4: Motor vehicles passing through intersections controlled by traffic lights shall pass in accordance with the following regulations: Pass in turn when encountering a release signal;
Here's the UDrive program for the given natural language query:

```
trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)                                        
    traffic_light_state(motor_vehicle_signal_light, green, not_flash)         
    find_obstacle(vehicle, front, (==, 0m))
    vehicle_state(stop)
then
    Mano(launch)
end

trigger 
    always 
condition 
    find_signal(traffic_light, <, 20m)                                        
    traffic_light_state(motor_vehicle_signal_light, green, not_flash)         
    find_obstacle(vehicle, front, (>, 0m))
    vehicle_state(stop)
then
    Set(Expected_speed, 20km/h)
    Mano(wait)
end
```

Law51_5: Motor vehicles passing through intersections controlled by traffic lights shall pass in accordance with the following regulations: When the stop signal is encountered, stop outside the stop line in turn. If there is no stop line, stop outside the intersection;
Here's the UDrive program for the given traffic regulation:

```
trigger 
    always 
condition 
    in(intersection)
    find_signal(stop_signal, <, 20m)
    !is_jam
then
    Mano(stop)
    Set(Min_stop_distance, intersection, 5m)
end

trigger 
    always 
condition 
    in(intersection)
    find_signal(stop_signal, <, 20m)
    is_jam
then
    Set(Expected_speed, 10km/h)
    Set(Min_stop_distance, intersection, 2m)
end
```

Law51_6: Motor vehicles passing through intersections controlled by traffic lights shall pass in accordance with the following regulations: When turning right when there is a car in the same lane waiting for the release signal, stop and wait in turn;
Here's the UDrive program for the given traffic regulation:

```
trigger 
    always 
condition 
    in(intersection)
    find_signal(traffic_light, <, 20m)
    traffic_light_state(motor_vehicle_signal_light, red, not_flash)
    vehicle_state(turn_right)
    find_obstacle(vehicle, front, same, (==, 0m))
then
    Mano(stop)
end

trigger 
    always 
condition 
    in(intersection)
    find_signal(traffic_light, <, 20m)
    traffic_light_state(motor_vehicle_signal_light, red, not_flash)
    vehicle_state(turn_right)
    find_obstacle(vehicle, front, same, (>, 0m))
then
    Set(Expected_speed, 10km/h)
end
```

Law51_7: Motor vehicles passing through intersections controlled by traffic lights shall pass in accordance with the following regulations: At intersections with no direction indicator lights, turning motor vehicles let straight vehicles and pedestrians go first. Right-turning motor vehicles traveling in the opposite direction let left-turning vehicles go first.
Here are the UDrive programs for the given traffic regulations at intersections:

```
trigger
    in(intersection)
condition
    !traffic_light_state(motor_vehicle_signal_light, green, not_flash)
    vehicle_state(turn_left_or_go_straight)
    find_obstacle(vehicle, front, same, (>, 0m))
    find_obstacle(pedestrian, front, (>, 0m))
then
    Mano(stop)
end

trigger
    in(intersection)
condition
    !traffic_light_state(motor_vehicle_signal_light, green, not_flash)
    vehicle_state(turn_right)
    find_obstacle(vehicle, front, opposite, (>, 0m))
    vehicle_state(turn_left)
then
    Mano(stop)
end

trigger
    in(intersection)
condition
    !traffic_light_state(motor_vehicle_signal_light, green, not_flash)
    vehicle_state(turn_right)
    !find_obstacle(vehicle, front, opposite, (>, 0m))
    !find_obstacle(pedestrian, front, (>, 0m))
then
    Mano(launch)
end
```

Law52_1: When a motor vehicle passes through an intersection that is not controlled by traffic lights or commanded by traffic police, in addition to complying with the provisions of Article 51 (2) and (3), it shall also comply with the following provisions: If there are traffic signs and markings, let the party with priority to go first;
```
trigger
    always
condition
    in(intersection)
    !find_signal(traffic_light, <, 100m)
    is_special_lane(without_centerline)
then
    Set(Whether_stop_before_entering_uncontrolled_intersection, True)
end

trigger
    always
condition
    in(intersection)
    !find_signal(traffic_light, <, 100m)
    find_signal(yield_signal, <, 20m)
then
    Mano(stop)
end
```

Law52_2: When a motor vehicle passes through an intersection that is not controlled by traffic lights or commanded by traffic police, in addition to complying with the provisions of Article 51 (2) and (3), it shall also comply with the following provisions: If there is no traffic sign or marking control, stop and look at the intersection before entering the intersection and let the traffic on the right road go first;
Here's the UDrive program for the given traffic rule:

```
trigger 
    in(intersection)
condition 
    not_in(motorway)
    !find_signal(traffic_light, ==, 0m)
    !is_special_lane(bus_lane)
    !is_special_lane(emergency_lane)
    vehicle_state(go_straight)
then
    Set(Whether_stop_before_entering_uncontrolled_intersection, True)
    Mano(stop)
    Set(Expected_speed, 20km/h)
end
```

```
trigger 
    in(intersection)
condition 
    not_in(motorway)
    !find_signal(traffic_light, ==, 0m)
    !is_special_lane(bus_lane)
    !is_special_lane(emergency_lane)
    find_obstacle(vehicle, right, (<=, 50m))
    vehicle_state(go_straight)
then
    Set(Whether_stop_before_entering_uncontrolled_intersection, True)
    Mano(stop)
    Set(Wait_time, intersection, 3)
end
```

Law52_3: When a motor vehicle passes through an intersection that is not controlled by traffic lights or commanded by traffic police, in addition to complying with the provisions of Article 51 (2) and (3), it shall also comply with the following provisions: Turning motor vehicles let straight vehicles go first;
```
trigger 
    always 
condition 
    in(intersection)
    is_jam
    vehicle_state(turn_left_or_go_straight)
    find_obstacle(vehicle, front, same, (>, 10m))
then
    Mano(stop)
end

trigger 
    always 
condition 
    in(intersection)
    is_jam
    vehicle_state(turn_right)
    find_obstacle(vehicle, front, same, (>, 10m))
then
    Set(Whether_priority_change_lane, False)
    Set(Expected_speed, 20km/h)
end
```

Law52_4: When a motor vehicle passes through an intersection that is not controlled by traffic lights or commanded by traffic police, in addition to complying with the provisions of Article 51 (2) and (3), it shall also comply with the following provisions: A right-turning motor vehicle driving in the opposite direction will let the left-turning vehicle go first.
```
trigger
    in(intersection)
condition
    not_in(motor_vehicle_signal_light)
    vehicle_state(turn_right)
    find_obstacle(vehicle, front, opposite, (>, 0m))
    vehicle_state(turn_left)
then
    Mano(wait)
end

trigger
    in(intersection)
condition
    not_in(motor_vehicle_signal_light)
    vehicle_state(turn_left)
    find_obstacle(vehicle, front, opposite, (>, 0m))
    vehicle_state(turn_right)
then
    Mano(launch)
end
```

Law53_1: When a motor vehicle encounters a traffic jam at an intersection ahead, it shall stop and wait in turn outside the intersection and shall not enter the intersection.
Here's the UDrive program for the given traffic jam scenario:

```
trigger 
    in(intersection)
condition 
    is_jam
then
    Mano(stop)
end
```

And an additional rule to prevent entering the intersection during a jam:

```
trigger 
    not_in(intersection)
condition 
    find_signal(traffic_light, <, 20m)
    is_jam
then
    Mano(stop)
end
```

Law53_2: When a motor vehicle encounters a motor vehicle in front of the vehicle parked in a queue or is driving slowly, it shall be queued in sequence, and shall not pass through or overtake from both sides of the vehicle in front and shall not park and wait in the area of crosswalks or no parking zone.
Here's the UDrive program for the given traffic rule:

```
trigger
    in(motorway) or in(urban_lane) or in(roundabout)
condition
    find_obstacle(vehicle, front, same, (==, 0m))
    not_in(crosswalk)
    not_in(no_parking_zone)
    vehicle_state(go_straight)
then
    Mano(stop)
    Set(Whether_allow_left_lane_change, False)
    Set(Whether_allow_right_lane_change, False)
end

trigger
    in(motorway) or in(urban_lane) or in(roundabout)
condition
    find_obstacle(vehicle, front, same, (<, 20m))
    not_in(crosswalk)
    not_in(no_parking_zone)
    vehicle_state(go_straight)
then
    Set(Expected_speed, 10km/h)
end
```

Law53_3: When a motor vehicle is at an intersection or road section with reduced lanes, if there is a motor vehicle in front of the vehicle parked in a queue or driving slowly, one vehicle in each lane shall alternately drive into the intersection or road section with reduced lanes.
```ebnf
trigger 
    always 
condition 
    in(intersection) or in(narrow_road) or in(sharp_curve) or in(steep_slope)
    find_obstacle(vehicle, front, same, (<=, 10m), (<=, 5km/h))
    vehicle_state(go_straight)
then
    Set(Whether_priority_change_lane, True)
    Set(Expected_speed, 20km/h)
    Change_lane(left, 1)
end
```

Law57_1: Motor vehicles shall use turn signals in accordance with the following provisions: When turning left, changing lanes to the left, preparing to overtake, leaving a parking place or turning around, the left turn signal shall be turned on in advance;
Here's the UDrive program for the given natural language query about turn signal usage:

```
trigger 
    in(steep_slope)
condition 
    vehicle_state(go_straight, (>, 0km/h))
then
    State(left_turn_light, True)
end

trigger 
    in(steep_slope)
condition 
    vehicle_state(turn_left, (>, 0km/h))
then
    State(left_turn_light, True)
end

trigger 
    in(steep_slope)
condition 
    vehicle_state(change_lane_to_left, (>, 0km/h))
then
    State(left_turn_light, True)
end

trigger 
    in(steep_slope)
condition 
    find_obstacle(vehicle, front, same, (>, 20m), (>, 30km/h))
then
    State(left_turn_light, True)
end

trigger 
    not_in(no_parking_zone)
condition 
    vehicle_state(stop, (==, 0km/h))
    time_is(daytime)
then
    State(left_turn_light, True)
end

```

Law57_2: Motor vehicles shall use turn signals in accordance with the following provisions: When turning right, changing lanes to the right, driving back to the original lane after overtaking, or pull over, the right turn signal should be turned on in advance.
Here's the UDrive program for the given natural language query:

```
trigger
    in(steep_slope)
condition
    vehicle_state(go_straight, (>, 0km/h))
then
    State(left_turn_light, False)
    State(right_turn_light, False)
    State(hazard_warning_light, False)
end

trigger
    always
condition
    vehicle_state(turn_right)
then
    State(right_turn_light, True)
end

trigger
    always
condition
    vehicle_state(change_lane_to_right)
then
    State(right_turn_light, True)
end

trigger
    always
condition
    vehicle_state(go_straight)
    find_obstacle(vehicle, front, same, (>, 20m), (>, 0km/h))
then
    State(right_turn_light, True)
end

trigger
    always
condition
    vehicle_state(pull3_over)
then
    State(right_turn_light, True)
end
```

Law58: When a motor vehicle is driving at night without streetlights, poor lighting, or low visibility conditions such as fog, rain, snow, sand, hail, etc., it shall turn on the headlights, position lights and rear position lights, but when the vehicle behind and the vehicle in front driving in the same direction are driving at close distances, the high beam shall not be used. When a motor vehicle is driving in a foggy day, the fog lights and hazard warning flashes should be turned on.
Here's the UDrive program for the given natural language query:

```udrive
trigger
    always
condition
    time_is(night)
    weather_is(foggy) or weather_is(raining) or weather_is(snowing) or weather_is(sandstorm) or weather_is(hail)
    find_obstacle(vehicle, front, same, (>, 100m))
then
    State(low_beam, True)
    State(position_light, True)
    State(fog_light, True)
    State(hazard_warning_light, True)
    State(high_beam, False)
end

trigger
    always
condition
    time_is(night)
    weather_is(foggy) or weather_is(raining) or weather_is(snowing) or weather_is(sandstorm) or weather_is(hail)
    find_obstacle(vehicle, front, same, (<=, 100m))
then
    State(low_beam, True)
    State(position_light, True)
    State(fog_light, True)
    State(hazard_warning_light, True)
    State(high_beam, False)
end

trigger
    always
condition
    time_is(night)
    not weather_is(foggy) and not weather_is(raining) and not weather_is(snowing) and not weather_is(sandstorm) and not weather_is(hail)
    find_obstacle(vehicle, front, same, (>, 100m))
then
    State(high_beam, True)
    State(position_light, True)
end

trigger
    always
condition
    time_is(night)
    not weather_is(foggy) and not weather_is(raining) and not weather_is(snowing) and not weather_is(sandstorm) and not weather_is(hail)
    find_obstacle(vehicle, front, same, (<=, 100m))
then
    State(low_beam, True)
    State(position_light, True)
    State(high_beam, False)
end
```

Law59_1: When a vehicle passes sharp bends, slopes, arch bridges, crosswalks or intersections without traffic lights at night, it shall alternately use far and near lights.
Here's the UDrive program for the given natural language query:

```
trigger 
    in(sharp_curve) or in(steep_slope) or in(sharp_bend) or in(crosswalk) or in(intersection)
condition 
    time_is(night)1
then
    State(alternated_between_high_and_low_beams, True)
end
```

Law59_2: When a motor vehicle is approaching sharp bends, the top of a ramp and other road sections that affect the safe sight distance, as well as overtaking or in an emergency, the vehicle should slow down and honk the horn.
Here's the UDrive program for the given natural language query:

```
trigger 
    in(steep_slope)
condition 
    vehicle_state(go_straight, (>, 0km/h))
then
    State(engine, True)
    State(neutral_gear, False)
end

trigger 
    in(sharp_bend) or in(steep_slope)
condition 
    vehicle_state(go_straight, (>, 0km/h))
then
    Set(Expected_speed, 30km/h)
    State(horn, True)
end

trigger 
    always
condition 
    is_jam
then
    Set(Expected_speed, 20km/h)
    State(horn, True)
end
```

Law62_2: Driving a motor vehicle shall not have the following behaviors: Honk horns in areas or road sections where honking is prohibited.
```
trigger 
    always 
condition 
    in(no_honking_signal)
then
    State(horn, False)
end
```

Law64: When a motor vehicle is passing a flooded Road or flooded Bridge, it shall stop and check the water conditions, and after confirming safety, pass at low speed.
Here's the UDrive program for the given natural language query:

```
trigger
    in(flooded_road) or in(flooded_bridge)
then
    Mano(stop)
    Set(Whether_check, flooded_road, True)
    Set(Expected_speed, 20km/h)
end

trigger
    in(flooded_road) or in(flooded_bridge)
condition
    !is_jam
then
    Mano(launch)
end
```

